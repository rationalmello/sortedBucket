/**
 * @file parity.cpp
 * 
 * @author Gavin Dan (xfdan10@gmail.com)
 * @brief Tests for sortedBucket implementations for correctness
 * @version 1.1
 * @date 2023-11-03
 * 
 * 
 * Inputting large dataset (10^6 integers) and checking for correctness
 * with std::vector as a guarantee
 */


#include <iostream>
#include "sortedBucketRBT.h"
#include "sortedBucketLL.h"
#include "sortedBucketVV.h"


int main() {
    /*
    vector<int> v1 {1, 2, 3};
    vector<int> v2 {4, 5, 6, 7, 8};
    vector<int> v3;
    for (int i = 0; i < 20; ++i)
        v3.emplace_back(i*2);
    */

    vector<int> v{111,8732,9909,-260,8150,3642,3685,6775,9833,8285,2350,1558,6610,7478,5397,377,1331,7452,6149,4946,-16,1431,8751,4324,8417,-814,5213,881,6885,7087,6070,1096,1359,4582,3919,1093,2530,8169,-916,6475,668,2965,8395,748,8338,1720,1324,5422,9287,5921,7563,2004,5338,5460,7600,-20,1487,1021,2152,71,6892,6357,-104,9696,1950,-525,-324,9454,4285,4928,4694,3226,2359,8443,3353,1362,8109,568,9809,2374,8087,1530,486,4339,4550,9728,7511,3136,3666,3063,916,541,3674,421,3044,3382,8974,-269,8042,6509,5186,3427,3510,8015,6505,5923,7052,8995,3886,8802,2722,6875,5622,465,1562,4542,-824,5079,1040,1446,9077,8536,-215,8083,1398,2181,1753,5125,8284,2717,5165,3487,6588,903,5640,3969,2772,1301,8207,7933,1308,4202,1029,-397,9190,-829,478,6586,-563,7956,-903,1485,8742,7332,3453,5534,194,2538,8786,29,5057,9897,-641,1517,6947,7080,5235,-514,1985,4365,4503,6966,8363,4894,7093,595,7236,6176,880,6247,2312,540,3776,4902,5499,1746,5848,356,5310,5425,5038,6360,3638,6433,4940,-286,5083,4480,3923,1785,8882,334,4927,9559,8792,4666,3768,9420,4492,3344,9996,5597,6670,9026,3778,1827,8328,9543,8398,356,8833,7291,-831,8190,-201,2713,6153,7648,3413,2336,271,4000,7087,8194,2358,627,1600,1974,1332,9932,7769,-620,4275,9764,3689,1293,3888,7263,837,-26,1669,-357,9699,5446,8475,3114,3057,7832,626,6912,4788,4679,2674,5367,2838,1970,3505,4018,693,6753,5461,4766,2281,1306,6972,1764,9671,1153,7722,-148,9946,5831,854,4605,6310,6948,2018,5290,-541,5899,-555,5220,1609,3818,2086,2699,5137,6093,8520,9930,6770,7570,3113,3629,1886,9551,9362,5585,2498,9412,9107,8208,89,48,3235,5614,7411,4551,3203,9746,8057,1263,2113,6876,270,2090,-7,1649,6172,6607,220,1366,5694,2569,-519,7645,5665,2938,6192,1994,2985,6290,-458,-867,1643,1187,2065,2078,7302,2904,3684,2407,5816,6043,5516,6317,8489,-684,-609,2925,1399,4185,6900,5552,4558,7980,5530,-943,3672,5107,5763,414,4781,6718,5509,8952,7528,3756,9731,7352,4254,147,2684,3434,8231,9878,9611,1684,5510,7124,9059,4569,-139,2966,6949,8356,1406,906,6581,9660,1030,2649,4878,2568,334,9531,5667,9102,7191,155,3085,5959,5141,109,-312,8457,7882,1920,-665,2709,9119,728,3992,9354,3566,2174,8331,7861,971,3045,8428,5954,2486,2582,9346,3038,8231,1414,4279,6878,6350,-622,2991,4372,6911,4604,21,4828,4690,9142,6293,9799,1382,4552,3033,3577};
    
    
    vector<int> v2{0, 99, 34, 82, 98, 82}; 
    SortedBucketRBT<int> rbt;
    
    for (int n:v2) rbt.insert(n);
    vector<int> dump;

    for (auto it = rbt.begin(); it != rbt.end(); ++it) {
        dump.emplace_back(*it);
    }
    vector<int> dump2(dump);
    sort(dump2.begin(), dump2.end());

    //cout << dump.size() << endl;
    for (int i = 0; i < dump.size(); ++i) {
        cout << dump[i] << endl;
        if (dump2[i] != dump[i]) {
            cout << " Err at " << i << ": claims " << dump[i] << " for dump and " << dump2[i] << " for dump2" << endl;
        }
        if (i != rbt.findWithDistance(dump2[i]).second) {
            cout << " Disterr at n=" << dump[i] << ": claims " << rbt.findWithDistance(dump[i]).second << " for actual dist " << i << endl;
        }
    }
    
    cout << "ok" << endl;
    return 0;
}